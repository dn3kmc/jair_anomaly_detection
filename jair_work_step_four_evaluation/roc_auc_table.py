# THE AUC MEAN AND CIS GENERATED BY THESE TABLES  ARE ON A DATASET BY DATASET BASIS
# THIS IS NOT THE SAME AS BY A CHARACTERISTIC CORPORA BY CHARACTERISTIC CORPORA BASIS

import sys  
sys.path.append("../time_series")  
sys.path.append("../anomaly_detection_methods")

import anomaly_detection_methods_helpers as ah
from time_series import TimeSeries
from os import listdir
from os.path import isfile, join
import joblib
import pandas as pd
import numpy as np
from sklearn.metrics import roc_curve, auc
import math
import matplotlib.pyplot as plt

import scipy.stats as st



mypath = "../jair_work_step_one_determine_characteristics/"
for f in listdir(mypath):
	if "ts_object" in f:
		ts = joblib.load(mypath + f)

		print(ts.name)

		# columns for the df for this dataset
		adm_column = []
		best_auc_column = []
		mean_auc_column = []
		lower_interval_column = []
		upper_interval_column = []

		# anomalous
		anomalous_roc_auc_path = "anomalous_roc_auc_all/"
		an_aucs = []
		for an in listdir(anomalous_roc_auc_path):
			if ts.name in an:
				an_roc_auc_dict = joblib.load(anomalous_roc_auc_path + an)
				an_aucs.append(an_roc_auc_dict["AUC"])
		if an_aucs:
			# print(an_aucs)
			adm_column.append("Anomalous")
			best_auc_column.append(max(an_aucs))
			mean_auc_column.append(np.mean(an_aucs))
			# lower and upper
			stdev = st.sem(an_aucs)
			if stdev == 0:
				stdev = .01
			lower, upper = st.t.interval(alpha=0.95, df=len(an_aucs)-1, loc=np.mean(an_aucs), scale=stdev) 
			lower_interval_column.append(lower)
			upper_interval_column.append(upper)


		# prophet
		prophet_roc_auc_path = "prophet_roc_auc_all/"
		prophet_aucs = []
		for prophet in listdir(prophet_roc_auc_path):
			if ts.name in prophet:
				prophet_roc_auc_dict = joblib.load(prophet_roc_auc_path + prophet)
				prophet_aucs.append(prophet_roc_auc_dict["AUC"])
		if prophet_aucs:
			# print(prophet_aucs)
			adm_column.append("Prophet")
			best_auc_column.append(max(prophet_aucs))
			mean_auc_column.append(np.mean(prophet_aucs))
			stdev = st.sem(prophet_aucs)
			if stdev == 0:
				stdev = .01
			lower, upper = st.t.interval(alpha=0.95, df=len(prophet_aucs)-1, loc=np.mean(prophet_aucs), scale=stdev) 
			lower_interval_column.append(lower)
			upper_interval_column.append(upper)

		# glim
		glim_roc_auc_path = "glim_roc_auc_all/"
		glim_aucs = []
		for glim in listdir(glim_roc_auc_path):
			if ts.name in glim:
				glim_roc_auc_dict = joblib.load(glim_roc_auc_path + glim)
				glim_aucs.append(glim_roc_auc_dict["AUC"])
		if glim_aucs:
			# print(glim_aucs)
			adm_column.append("GLiM")
			best_auc_column.append(max(glim_aucs))
			mean_auc_column.append(np.mean(glim_aucs))
			stdev = st.sem(glim_aucs)
			if stdev == 0:
				stdev = .01
			lower, upper = st.t.interval(alpha=0.95, df=len(glim_aucs)-1, loc=np.mean(glim_aucs), scale=stdev) 
			lower_interval_column.append(lower)
			upper_interval_column.append(upper)

		# matrix profile
		matrix_profile_roc_auc_path = "matrix_profile_roc_auc_all/"
		matrix_profile_aucs = []
		for matrix_profile in listdir(matrix_profile_roc_auc_path):
			if ts.name in matrix_profile:
				matrix_profile_roc_auc_dict = joblib.load(matrix_profile_roc_auc_path + matrix_profile)
				matrix_profile_aucs.append(matrix_profile_roc_auc_dict["AUC"])
		if matrix_profile_aucs:
			# print(matrix_profile_aucs)
			adm_column.append("Matrix Profile")
			best_auc_column.append(max(matrix_profile_aucs))
			mean_auc_column.append(np.mean(matrix_profile_aucs))
			stdev = st.sem(matrix_profile_aucs)
			if stdev == 0:
				stdev = .01
			lower, upper = st.t.interval(alpha=0.95, df=len(matrix_profile_aucs)-1, loc=np.mean(matrix_profile_aucs), scale=stdev) 
			lower_interval_column.append(lower)
			upper_interval_column.append(upper)

		# pbad
		pbad_roc_auc_path = "pbad_roc_auc_all/"
		pbad_aucs = []
		for pbad in listdir(pbad_roc_auc_path):
			if ts.name in pbad:
				pbad_roc_auc_dict = joblib.load(pbad_roc_auc_path + pbad)
				pbad_aucs.append(pbad_roc_auc_dict["AUC"])
		if pbad_aucs:
			# print(pbad_aucs)
			adm_column.append("PBAD")
			best_auc_column.append(max(pbad_aucs))
			mean_auc_column.append(np.mean(pbad_aucs))
			stdev = st.sem(pbad_aucs)
			if stdev == 0:
				stdev = .01
			lower, upper = st.t.interval(alpha=0.95, df=len(pbad_aucs)-1, loc=np.mean(pbad_aucs), scale=stdev) 
			lower_interval_column.append(lower)
			upper_interval_column.append(upper)

		# sarimax
		sarimax_roc_auc_path = "sarimax_roc_auc_all/"
		sarimax_aucs = []
		for sarimax in listdir(sarimax_roc_auc_path):
			if ts.name in sarimax:
				sarimax_roc_auc_dict = joblib.load(sarimax_roc_auc_path + sarimax)
				sarimax_aucs.append(sarimax_roc_auc_dict["AUC"])
		if sarimax_aucs:
			# print(sarimax_aucs)
			adm_column.append("SARIMAX")
			best_auc_column.append(max(sarimax_aucs))
			mean_auc_column.append(np.mean(sarimax_aucs))
			stdev = st.sem(sarimax_aucs)
			if stdev == 0:
				stdev = .01
			lower, upper = st.t.interval(alpha=0.95, df=len(sarimax_aucs)-1, loc=np.mean(sarimax_aucs), scale=stdev) 
			lower_interval_column.append(lower)
			upper_interval_column.append(upper)

		# stl
		stl_roc_auc_path = "stl_roc_auc_all/"
		stl_aucs = []
		for stl in listdir(stl_roc_auc_path):
			if ts.name in stl:
				stl_roc_auc_dict = joblib.load(stl_roc_auc_path + stl)
				stl_aucs.append(stl_roc_auc_dict["AUC"])
		if stl_aucs:
			# print(stl_aucs)
			adm_column.append("STL")
			best_auc_column.append(max(stl_aucs))
			mean_auc_column.append(np.mean(stl_aucs))
			stdev = st.sem(stl_aucs)
			if stdev == 0:
				stdev = .01
			lower, upper = st.t.interval(alpha=0.95, df=len(stl_aucs)-1, loc=np.mean(stl_aucs), scale=stdev) 
			lower_interval_column.append(lower)
			upper_interval_column.append(upper)

		# streaming hs
		hstree_roc_auc_path = "hstree_roc_auc_all/"
		hstree_aucs = []
		for hstree in listdir(hstree_roc_auc_path):
			if ts.name in hstree:
				hstree_roc_auc_dict = joblib.load(hstree_roc_auc_path + hstree)
				hstree_aucs.append(hstree_roc_auc_dict["AUC"])
		if hstree_aucs:
			# print(hstree_aucs)
			adm_column.append("HS Tree")
			best_auc_column.append(max(hstree_aucs))
			mean_auc_column.append(np.mean(hstree_aucs))
			stdev = st.sem(hstree_aucs)
			if stdev == 0:
				stdev = .01
			lower, upper = st.t.interval(alpha=0.95, df=len(hstree_aucs)-1, loc=np.mean(hstree_aucs), scale=stdev) 
			lower_interval_column.append(lower)
			upper_interval_column.append(upper)

		# twitter
		twitter_roc_auc_path = "twitter_roc_auc_all/"
		twitter_aucs = []
		for twitter in listdir(twitter_roc_auc_path):
			if ts.name in twitter:
				twitter_roc_auc_dict = joblib.load(twitter_roc_auc_path + twitter)
				twitter_aucs.append(twitter_roc_auc_dict["AUC"])
		if twitter_aucs:
			# print(twitter_aucs)
			adm_column.append("Twitter")
			best_auc_column.append(max(twitter_aucs))
			mean_auc_column.append(np.mean(twitter_aucs))
			stdev = st.sem(twitter_aucs)
			if stdev == 0:
				stdev = .01
			lower, upper = st.t.interval(alpha=0.95, df=len(twitter_aucs)-1, loc=np.mean(twitter_aucs), scale=stdev) 
			lower_interval_column.append(lower)
			upper_interval_column.append(upper)

		# vae
		vae_roc_auc_path = "vae_roc_auc_all/"
		vae_aucs = []
		for vae in listdir(vae_roc_auc_path):
			if ts.name in vae:
				vae_roc_auc_dict = joblib.load(vae_roc_auc_path + vae)
				vae_aucs.append(vae_roc_auc_dict["AUC"])
		if vae_aucs:
			# print(vae_aucs)
			adm_column.append("VAE")
			best_auc_column.append(max(vae_aucs))
			mean_auc_column.append(np.mean(vae_aucs))
			stdev = st.sem(vae_aucs)
			if stdev == 0:
				stdev = .01
			lower, upper = st.t.interval(alpha=0.95, df=len(vae_aucs)-1, loc=np.mean(vae_aucs), scale=stdev) 
			lower_interval_column.append(lower)
			upper_interval_column.append(upper)

		# windowed gaussian
		windowed_gaussian_roc_auc_path = "windowed_gaussian_roc_auc_all/"
		windowed_gaussian_aucs = []
		for windowed_gaussian in listdir(windowed_gaussian_roc_auc_path):
			if ts.name in windowed_gaussian:
				windowed_gaussian_roc_auc_dict = joblib.load(windowed_gaussian_roc_auc_path + windowed_gaussian)
				windowed_gaussian_aucs.append(windowed_gaussian_roc_auc_dict["AUC"])
		if windowed_gaussian_aucs:
			# print(windowed_gaussian_aucs)
			adm_column.append("Windowed Gaussian")
			best_auc_column.append(max(windowed_gaussian_aucs))
			mean_auc_column.append(np.mean(windowed_gaussian_aucs))
			stdev = st.sem(windowed_gaussian_aucs)
			if stdev == 0:
				stdev = .01
			lower, upper = st.t.interval(alpha=0.95, df=len(windowed_gaussian_aucs)-1, loc=np.mean(windowed_gaussian_aucs), scale=stdev) 
			lower_interval_column.append(lower)
			upper_interval_column.append(upper)

		# htm
		htm_roc_auc_path = "htm_roc_auc_all/"
		htm_aucs = []
		for htm in listdir(htm_roc_auc_path):
			if ts.name in htm:
				htm_roc_auc_dict = joblib.load(htm_roc_auc_path + htm)
				htm_aucs.append(htm_roc_auc_dict["AUC"])
		if htm_aucs:
			# print(htm_aucs)
			adm_column.append("HTM")
			best_auc_column.append(max(htm_aucs))
			mean_auc_column.append(np.mean(htm_aucs))
			stdev = st.sem(htm_aucs)
			if stdev == 0:
				stdev = .01
			lower, upper = st.t.interval(alpha=0.95, df=len(htm_aucs)-1, loc=np.mean(htm_aucs), scale=stdev) 
			lower_interval_column.append(lower)
			upper_interval_column.append(upper)

		result_df = pd.DataFrame({"Anomaly Detection Method": adm_column, "Best AUC": best_auc_column, "Mean AUC": mean_auc_column, "Lower": lower_interval_column, "Upper": upper_interval_column})


		print(result_df)
		print("\n")

		joblib.dump(result_df, "dataset_roc_auc_tables/" + ts.name + "_auc_table")